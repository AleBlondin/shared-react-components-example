{
  "Create PropsType file": {
    "prefix": "snippet.propstype.file",
    "body": ["// @flow", "", "declare type ${1:ComponentName}PropsType = ", ""],
    "description": "An empty flow type file"
  },
  "Create .component class": {
    "prefix": "snippet.component.class",
    "body": [
      "// @flow",
      "",
      "import React from 'react';",
      "",
      "import Style from './${1:ComponentName}.style';",
      "",
      "type PropsType = {",
      "\tclassName?: string,",
      "};",
      "",
      "class ${1:ComponentName} extends React.Component<PropsType> {",
      "\tprops: PropsType;",
      "",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<Style className={this.props.className}>",
      "\t\t\t\t${2:Content}",
      "\t\t\t</Style>",
      "\t\t);",
      "\t}",
      "}",
      "",
      "${1:ComponentName}.defaultProps = {",
      "\tclassName: '',",
      "};",
      "",
      "export default ${1:ComponentName};",
      ""
    ],
    "description": "A React Dumb Component as class"
  },
  "Create .component pure function": {
    "prefix": "snippet.component.pure",
    "body": [
      "// @flow",
      "",
      "import React from 'react';",
      "",
      "import Style from './${1:ComponentName}.style';",
      "",
      "type PropsType = {",
      "\tclassName?: string,",
      "};",
      "",
      "const ${1:ComponentName} = (props: PropsType) => (",
      "\t<Style className={props.className}>",
      "\t\t${2:Content}",
      "\t</Style>",
      ");",
      "",
      "${1:ComponentName}.defaultProps = {",
      "\tclassName: '',",
      "};",
      "export default ${1:ComponentName};",
      ""
    ],
    "description": "A React Dumb Component as pure function"
  },
  "Create styled .component": {
    "prefix": "snippet.styled",
    "body": [
      "// @flow",
      "",
      "import React from 'react';",
      "import styled from 'styled-components';",
      "",
      "type PropsType = {};",
      "",
      "const Styled${1:ComponentName} = styled.div`",
      "\t${3:Content}",
      "`;",
      "",
      "export default (props: PropsType) => <Styled${1:ComponentName} {...props} />;",
      ""
    ],
    "description": "A Styled component"
  },
  "Create .container": {
    "prefix": "snippet.container",
    "body": [
      "import { connect } from 'react-redux';",
      "",
      "import { toJS } from 'utils/to-js';",
      "import { createStructuredSelector } from 'reselect';",
      "",
      "import ${1:ComponentName} from './${1:ComponentName}.component';",
      "",
      "const mapStateToProps = createStructuredSelector({",
      "\t",
      "});",
      "",
      "const mapDispatchToProps = {};",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(toJS(${1:ComponentName}));",
      ""
    ],
    "description": "A Styled component"
  },
  "Create redux actions with api": {
    "prefix": "snippet.redux.actions.api",
    "body": [
      "// @flow",
      "",
      "export const actionTypes = {",
      "\tREQUEST: {",
      "\t\t${2:actionName}: {",
      "\t\t\tERROR: '${1:moduleName}.REQUEST.${2:actionName}.ERROR',",
      "\t\t\tSTART: '${1:moduleName}.REQUEST.${2:actionName}.START',",
      "\t\t\tSUCCESS: '${1:moduleName}.REQUEST.${2:actionName}.SUCCESS',",
      "\t\t},",
      "\t},",
      "};",
      "",
      "export default {",
      "\terrorFetchArticleById: (${3:params}) => ({",
      "\t\ttype: actionTypes.REQUEST.${2:actionName}.ERROR,",
      "\t\tpayload: { ${3:params} },",
      "\t}),",
      "\tstartFetchArticleById: (${3:params}) => ({",
      "\t\ttype: actionTypes.REQUEST.${2:actionName}.START,",
      "\t\tpayload: { ${3:params} },",
      "\t}),",
      "\tsuccessFetchArticleById: (${3:params}) => ({",
      "\t\ttype: actionTypes.REQUEST.${2:actionName}.SUCCES,",
      "\t\tpayload: { ${3:params} },",
      "\t}),",
      "}"
    ],
    "description": "An action file with typical API calls"
  },
  "Create redux sagas with api": {
    "prefix": "snippet.redux.sagas.api",
    "body": [
      "// @flow",
      "",
      "import { call, put, takeLatest } from 'redux-saga/effects';",
      "",
      "import { api } from '@shared-components/molecules';",
      "import actionCreators, { actionTypes } from './actions';",
      "import { normalize${1:moduleName} } from './normalize';",
      "",
      "function* ${1:actionName}Saga(action): SagaType {",
      "\ttry {",
      "\t\tconst api${1:moduleName}: Api${1:moduleName}Type[] = yield call(",
      "\t\t\tapi.${1:actionName},",
      "\t\t\taction.payload.id",
      "\t\t);",
      "",
      "\t\tconst { entities } = normalize${1:moduleName}(api${1:moduleName});",
      "",
      "\t\tyield put(",
      "\t\t\tactionCreators.success${2:actionName}(",
      "\t\t\t\tentities,",
      "\t\t\t)",
      "\t\t);",
      "\t} catch (err) {",
      "\t\tyield put(actionCreators.error${2:actionName}());",
      "\t}",
      "}",
      "",
      "export default function* (): SagaType {",
      "\tyield takeLatest(",
      "\t\tactionTypes.REQUEST.${2:actionNameCapital}.START,",
      "\t\t${1:actionName}Saga,",
      "\t);",
      "}"
    ],
    "description": "A saga file with a typical API call"
  },
  "Create redux reducers with api": {
    "prefix": "snippet.redux.reducers.api",
    "body": [
      "// @flow",
      "",
      "import { actionTypes } from './actions';",
      "",
      "const initialState: ${1:moduleName}StateType = {",
      "\t${1:moduleName}: {},",
      "};",
      "",
      "export default (",
      "\tstate: ${1:moduleName}StateType = initialState,",
      "\taction: ActionType<*>",
      "): ${1:moduleName}StateType => {",
      "\tswitch (action.type) {",
      "\t\tcase actionTypes.REQUEST.${2:actionName}.SUCCESS:",
      "\t\t\treturn {",
      "\t\t\t\t...state,",
      "\t\t\t\tlist: action.payload.result,",
      "\t\t\t\tbyId: action.payload.entities,",
      "\t\t\t};",
      "\t\tdefault:",
      "\t\t\treturn state;",
      "\t}",
      "};"
    ],
    "description": "A reducers file with a typical API call"
  },
  "Create redux normalize with api": {
    "prefix": "snippet.redux.normalize.api",
    "body": [
      "// @flow",
      "",
      "import { normalize, schema } from 'normalizr';",
      "",
      "import { modelize${1:moduleName} } from './modelize';",
      "",
      "export const articleSchema = new schema.Entity('${2:entityName}', {}, {",
      "\tprocessStrategy: modelize${1:moduleName},",
      "});",
      "",
      "export const normalizeArticle = (${2:entityName}Api: Api${1:moduleName}Type) => normalize(${2:entityName}Api, ${2:entityName}Schema);",
      ""
    ],
    "description": "A normalize file with a typical API call"
  },
  "Import lib": {
    "prefix": "snippet.import.rel",
    "body": ["import ${1:Component} from './${1:Component}';"],
    "description": "Import relative component"
  },
  "Index as default": {
    "prefix": "snippet.index.as",
    "body": ["export { default as ${1:Component} } from './${1:Component}';"],
    "description": "Export component as its name"
  },
  "Create redux saga test": {
    "prefix": "snippet.redux.sagas.tests",
    "body": [
      "/* eslint-disable redux-saga/yield-effects */",
      "",
      "import { expectSaga } from 'redux-saga-test-plan';",
      "import * as matchers from 'redux-saga-test-plan/matchers';",
      "import { select } from 'redux-saga/effects';",
      "",
      "import { ${1:saga} } from 'path/to/saga/to/test';",
      "",
      "describe('my sagas', () => {",
      "\tit('should describe ${1:saga}', async () => {",
      "\t\tawait expectSaga(${1:saga})",
      "\t\t\t.provide([",
      "\t\t\t\t[matchers.call.fn(apiCallToMock), { data: mocked_value }],",
      "\t\t\t\t[select(selectorToMock), mocked_value],",
      "\t\t\t])",
      "\t\t\t.dispatch(myAction())",
      "\t\t\t.put({ type: ACTION_TYPE_1, payload: { actionPayload } })",
      "\t\t\t.put.actionType(ACTION_TYPE_2)",
      "\t\t\t.not.put.actionType(ACTION_TYPE_3)",
      "\t\t\t.run()",
      "\t\t});",
      "\t});",
      ""
    ],
    "description": "A saga functional test"
  },
  "React console.log": {
    "prefix": "snippet.clor",
    "body": "console.log('${1:object} :', ${1:object}) || ",
    "description": "Append react functionnal component with console.log on object"
  },
  "React console.log props": {
    "prefix": "snippet.clorp",
    "body": "console.log('props :', props) || ",
    "description": "Append react functionnal component with console.log on props"
  }
}
